{
  "projectName": "Swipe5 (DialN Swipe Discovery)",
  "description": "A Next.js + Supabase app where users swipe from categories → subcategories → places. Only final 'place' cards become matches. The user can search or skip. Google Maps iframe pins each place on a map at the places layer.",
  "status": "in-progress",
  "technologies": {
    "frontend": "Next.js (React)",
    "database": "Supabase (PostgreSQL)",
    "maps": "Google Maps Embed API",
    "externalAPI": "Good Places API (placeholder if needed)"
  },
  "environmentVariables": {
    "GOOD_PLACES_API_KEY": "Your Good Places API Key here",
    "NEXT_PUBLIC_GOOGLE_MAPS_EMBED_KEY": "Your Google Maps Embed Key here",
    "NEXT_PUBLIC_SUPABASE_URL": "Your Supabase project URL here",
    "NEXT_PUBLIC_SUPABASE_ANON_KEY": "Your Supabase anon key here"
  },
  "supabase": {
    "tables": [
      {
        "name": "categories",
        "schemaFields": [
          { "id": "int4" },
          { "name": "text" },
          { "is_active": "boolean?" },
          { "weight": "int4?" }
        ],
        "notes": "Top-level categories. 'is_active' helps avoid showing categories with no real subcategories. 'weight' can help sort for display."
      },
      {
        "name": "subcategories",
        "schemaFields": [
          { "id": "int4" },
          { "category_id": "int4" },
          { "name": "text" },
          { "is_active": "boolean?" },
          { "weight": "int4?" }
        ],
        "notes": "Each subcategory references a category. 'is_active' hides subcategories with no places. 'weight' can help sorting."
      },
      {
        "name": "places",
        "schemaFields": [
          { "id": "int4" },
          { "name": "text" },
          { "neighborhood_id": "int4 (nullable)" },
          { "latitude": "float8?" },
          { "longitude": "float8?" },
          { "image_url": "text (nullable)" },
          { "description": "text (nullable)" },
          { "weight": "int4?" },
          { "is_active": "boolean?" }
        ],
        "notes": "Final 'swipe' cards. Only places get matched. 'latitude'/'longitude' for Google Maps embed; 'is_active' hides incomplete or deactivated places."
      },
      {
        "name": "neighborhoods",
        "schemaFields": [
          { "id": "int4" },
          { "name": "text" },
          { "is_active": "boolean?" },
          { "weight": "int4?" }
        ],
        "notes": "Neighborhoods. If user searches a neighborhood, we load places in that neighborhood. 'weight' for sorting, 'is_active' for validity."
      },
      {
        "name": "place_subcategories",
        "schemaFields": [
          { "place_id": "int4" },
          { "subcategory_id": "int4" },
          { "weight": "int4?" }
        ],
        "notes": "Join table linking places to subcategories. Potentially includes 'weight' or other metadata."
      },
      {
        "name": "reviews",
        "schemaFields": [
          { "id": "int4" },
          { "place_id": "int4" },
          { "user_id": "int4" },
          { "rating": "int4" },
          { "comment": "text" },
          { "created_at": "timestamp" }
        ],
        "notes": "If we enable user reviews, we store them here."
      },
      {
        "name": "food_categories",
        "schemaFields": [],
        "notes": "Placeholder. Possibly unify with 'subcategories' if not needed."
      },
      {
        "name": "place_food_categories",
        "schemaFields": [],
        "notes": "Placeholder join table for places to specialized 'food categories.'"
      }
    ],
    "buckets": [
      {
        "bucketName": "category-images",
        "access": "Public",
        "storedFiles": [
          "baltimore_53.jpg",
          "downtown_3.jpg",
          "various_1.jpg"
        ],
        "notes": "Images for categories or neighborhoods."
      },
      {
        "bucketName": "activity-images",
        "access": "Public",
        "storedFiles": [],
        "notes": "Optional bucket for place/activity images."
      }
    ],
    "notes": "We can filter out items (categories/subcategories/neighborhoods/places) by checking 'is_active' or by weighting them."
  },
  "repository": {
    "githubUrl": "https://github.com/jraz35fk/swipe5",
    "latestCommit": "a094197 (8 hours ago)",
    "mainFiles": [
      {
        "name": "index.js",
        "location": "pages/index.js",
        "notes": "Handles logic for the category → subcategory → place swipe flow, embedded map, and search bar."
      },
      {
        "name": "MapContainer.js",
        "location": "components/MapContainer.js",
        "notes": "Example container for Google Maps iframe logic."
      },
      {
        "name": ".env.local",
        "location": "root directory",
        "notes": "Contains Supabase and Google Maps keys."
      }
    ]
  },
  "userPreferences": {
    "os": "macOS",
    "codeEditing": "prefers copy/paste entire scripts",
    "experienceLevel": "beginner",
    "deployment": "Vercel (with environment variables)",
    "notes": "Wants step-by-step instructions for any code changes. Full script rewrites are preferred."
  },
  "previousSteps": [
    {
      "date": "Earlier summary",
      "summary": "We configured the Next.js + Supabase setup, created database tables, set environment variables on Vercel, tested the Google Maps Embed. We planned the category → subcategory → place structure with a yes/no 'swipe' mechanic and a search bar."
    },
    {
      "date": "LegacyBotSummary",
      "legacyBotSummary": {
        "appName": "DialN Swipe Discovery",
        "description": "A Next.js + Supabase app where users swipe through categories → subcategories → places, only final 'place' cards become matches. The user can search or skip. Google Maps embed pins each place on a map when user reaches the places layer.",
        "supabaseSchema": {
          "categories": {
            "fields": ["id", "name", "is_active", "weight"],
            "usage": "Top-level categories. Only categories referencing real subcategories remain active."
          },
          "subcategories": {
            "fields": ["id", "category_id", "name", "is_active", "weight"],
            "usage": "Each subcategory references a category; only subcategories with places remain active."
          },
          "places": {
            "fields": [
              "id",
              "name",
              "neighborhood_id",
              "latitude",
              "longitude",
              "image_url",
              "description",
              "weight"
            ],
            "usage": "Final cards the user can match. Only 'places' are stored in the match deck."
          },
          "neighborhoods": {
            "fields": ["id", "name", "is_active", "weight"],
            "usage": "Stores local neighborhoods; active only if referencing real places. Allows user to search by neighborhood."
          },
          "place_subcategories": {
            "fields": ["place_id", "subcategory_id"],
            "usage": "A join table linking each place to its subcategories. Possibly includes weight or other metadata."
          }
        },
        "frontEndFlow": {
          "framework": "Next.js (React)",
          "states": {
            "catIndex": "Tracks current category index",
            "subIndex": "Tracks current subcategory index",
            "placeIndex": "Tracks current place index",
            "mode": "Either 'categories', 'subcategories', or 'places'",
            "selectedCategory": "Stores user-chosen category object",
            "selectedSubcategory": "Stores user-chosen subcategory object",
            "placesArray": "Holds the final loaded places for the chosen subcategory",
            "matches": "Array of places the user has said 'Yes' to in places mode"
          },
          "flowLogic": {
            "categories": {
              "Yes": "Select category → move to subcategories mode",
              "No": "Increment catIndex"
            },
            "subcategories": {
              "Yes": "Load places for subcategory → move to places mode",
              "No": "Increment subIndex"
            },
            "places": {
              "Yes": "User matches the place (added to 'matches'), then next placeIndex",
              "No": "Increment placeIndex"
            }
          },
          "searchBar": {
            "searchSuggestions": [
              "categories",
              "subcategories",
              "neighborhoods"
            ],
            "matchingLogic": "User types → we filter items → user picks item → jump to that layer (or load places if neighborhood)"
          },
          "matchDeck": {
            "overlayModal": "Shows all matched places. Closes on user command, new matches counted as (+N) if closed.",
            "matchesArray": "Holds final matched places"
          }
        },
        "googleMapsIntegration": {
          "approach": "Google Maps Embed (iframe) with 'search' mode",
          "envVariable": "NEXT_PUBLIC_GOOGLE_MAPS_EMBED_KEY",
          "urlExample": "https://www.google.com/maps/embed/v1/search?key=YOUR_KEY&zoom=14&q=LAT,LON",
          "whereItAppears": "Places layer only, each place card has an iframe pinned to latitude/longitude"
        },
        "extraDetails": {
          "isActiveFiltering": "Categories, subcategories, neighborhoods get is_active=FALSE if empty",
          "weightSorting": "Places or subcategories can be sorted descending by weight",
          "neighborhoodSearch": "User can pick a neighborhood from search → app loads places for that neighborhood",
          "matchesAreOnlyPlaces": "Categories/subcategories never become matches, only final place cards"
        },
        "exampleIndexHighlights": [
          "loadBaseData() from Supabase → categories, subcategories, neighborhoods",
          "filter subcategories referencing places → filter categories referencing subcategories",
          "Yes/No flow: handleYesCategory, handleYesSubcategory, handleYesPlace, etc.",
          "Search merges categories, subcategories, neighborhoods → pickSearchSuggestion() handles jumps"
        ]
      }
    }
  ],
  "consolidatedProjectSummary": {
    "concept": "A Tinder-like or yes/no 'swipe' interface that leads the user through categories → subcategories → places. Only 'places' can be matched. There is also a search bar combining categories, subcategories, neighborhoods. On the final place card, we embed a Google Map pinned at lat/lon.",
    "databaseSchema": "Uses Supabase with tables for categories, subcategories, places, neighborhoods, plus a join table (place_subcategories) to link them. We may filter items by 'is_active' or 'weight' to avoid empty leads.",
    "frontEndFlow": {
      "states": {
        "catIndex": "Index into categories[]",
        "subIndex": "Index into subcategories[]",
        "placeIndex": "Index into places[]",
        "mode": "'categories' | 'subcategories' | 'places'",
        "selectedCategory": "Currently chosen category object",
        "selectedSubcategory": "Currently chosen subcategory object",
        "placesArray": "Holds loaded places for the selected subcategory (or neighborhood)",
        "matches": "Array of final places that user said 'Yes' to"
      },
      "yesNoFlow": {
        "categoriesYes": "Sets 'selectedCategory', transitions to subcategories mode",
        "categoriesNo": "Increment catIndex",
        "subcategoriesYes": "Loads places for that subcat, transitions to places mode",
        "subcategoriesNo": "Increment subIndex",
        "placesYes": "Adds place to matches, increments placeIndex",
        "placesNo": "Increment placeIndex"
      },
      "searchBar": "Merges categories, subcategories, neighborhoods in a single suggestion list. If user picks a neighborhood, load places in that neighborhood. If category or subcategory, jump to that flow. Clear search afterward."
    },
    "mapsIntegration": {
      "method": "Google Maps Embed API with <iframe>",
      "paramFormat": "https://www.google.com/maps/embed/v1/search?key=EMBED_KEY&zoom=14&q=LAT,LON"
    }
  },
  "openQuestions": [
    "Do we integrate user authentication for reviews or matches, or keep it local?",
    "Do we unify 'food_categories' or remove them entirely?",
    "Any advanced design or styling changes needed next?"
  ],
  "notes": "We keep everything in sync here. We'll update the 'index.js' code in 'files' with every new iteration.",
  "files": {
    "index.js": {
      "purpose": "The main Next.js page for category → subcategory → place flow, plus searching and Google Map embed.",
      "code": "import { useEffect, useState } from \"react\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n);\n\nexport default function Home() {\n  // MAIN DATA\n  const [categories, setCategories] = useState([]);\n  const [subcategories, setSubcategories] = useState([]);\n  const [places, setPlaces] = useState([]);\n  const [neighborhoods, setNeighborhoods] = useState([]);\n\n  // Flow\n  const [catIndex, setCatIndex] = useState(0);\n  const [subIndex, setSubIndex] = useState(0);\n  const [placeIndex, setPlaceIndex] = useState(0);\n  const [mode, setMode] = useState(\"categories\");\n\n  // Current selections\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [selectedSubcategory, setSelectedSubcategory] = useState(null);\n\n  // Matches & deck\n  const [matches, setMatches] = useState([]);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const [matchDeckOpen, setMatchDeckOpen] = useState(false);\n  const [newMatchesCount, setNewMatchesCount] = useState(0);\n\n  // Search\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchSuggestions, setSearchSuggestions] = useState([]);\n  const [showSearchSuggestions, setShowSearchSuggestions] = useState(false);\n\n  // Google Maps Embed API key from your .env.local\n  const googleMapsKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_EMBED_KEY || \"\";\n\n  // ===============================\n  // 1) Load Data on Mount\n  // ===============================\n  useEffect(() => {\n    loadBaseData();\n  }, []);\n\n  async function loadBaseData() {\n    try {\n      // 1) Load categories\n      let { data: catData } = await supabase\n        .from(\"categories\")\n        .select(\"*\")\n        .eq(\"is_active\", true)\n        .order(\"weight\", { ascending: false });\n\n      // 2) Load subcategories\n      let { data: subData } = await supabase\n        .from(\"subcategories\")\n        .select(\"*\")\n        .eq(\"is_active\", true)\n        .order(\"weight\", { ascending: false });\n\n      // Filter subcategories referencing places\n      let { data: psData } = await supabase\n        .from(\"place_subcategories\")\n        .select(\"subcategory_id\");\n      const validSubs = new Set((psData || []).map((ps) => ps.subcategory_id));\n      subData = (subData || []).filter((s) => validSubs.has(s.id));\n\n      // Keep only categories that have subcategories\n      const catWithSubs = new Set(subData.map((s) => s.category_id));\n      catData = (catData || []).filter((c) => catWithSubs.has(c.id));\n\n      // Sort\n      catData.sort((a, b) => (b.weight || 0) - (a.weight || 0));\n      subData.sort((a, b) => (b.weight || 0) - (a.weight || 0));\n\n      setCategories(catData);\n      setSubcategories(subData);\n\n      // 3) Load neighborhoods\n      let { data: hoodData } = await supabase\n        .from(\"neighborhoods\")\n        .select(\"*\")\n        .eq(\"is_active\", true)\n        .order(\"weight\", { ascending: false });\n      setNeighborhoods(hoodData || []);\n    } catch (err) {\n      setErrorMsg(err.message);\n    }\n  }\n\n  // Helper: get subcats for a category\n  function getSubcatsForCategory(cat) {\n    if (!cat) return [];\n    return subcategories.filter((s) => s.category_id === cat.id);\n  }\n\n  // ===============================\n  // 2) Search Logic\n  // ===============================\n  useEffect(() => {\n    if (!searchTerm) {\n      setSearchSuggestions([]);\n      return;\n    }\n    const lower = searchTerm.toLowerCase();\n\n    const catMatches = categories\n      .filter((c) => c.name.toLowerCase().includes(lower))\n      .map((c) => ({ type: \"category\", name: c.name, id: c.id }));\n\n    const subMatches = subcategories\n      .filter((s) => s.name.toLowerCase().includes(lower))\n      .map((s) => ({ type: \"subcategory\", name: s.name, id: s.id }));\n\n    const hoodMatches = neighborhoods\n      .filter((n) => n.name.toLowerCase().includes(lower))\n      .map((n) => ({ type: \"neighborhood\", name: n.name, id: n.id }));\n\n    const combined = [...catMatches, ...subMatches, ...hoodMatches];\n    setSearchSuggestions(combined.slice(0, 8));\n  }, [searchTerm, categories, subcategories, neighborhoods]);\n\n  function pickSearchSuggestion(sug) {\n    setSearchTerm(sug.name);\n    setShowSearchSuggestions(false);\n\n    if (sug.type === \"category\") {\n      const idx = categories.findIndex((c) => c.id === sug.id);\n      if (idx !== -1) {\n        setCatIndex(idx);\n        setMode(\"categories\");\n        handleYesCategoryOverride(idx);\n      }\n    } else if (sug.type === \"subcategory\") {\n      const subObj = subcategories.find((x) => x.id === sug.id);\n      if (!subObj) return;\n      const catId = subObj.category_id;\n      const catIdx = categories.findIndex((c) => c.id === catId);\n      if (catIdx !== -1) {\n        setCatIndex(catIdx);\n        setSelectedCategory(categories[catIdx]);\n        setMode(\"subcategories\");\n\n        const scList = getSubcatsForCategory(categories[catIdx]);\n        const scIdx = scList.findIndex((x) => x.id === sug.id);\n        if (scIdx !== -1) {\n          setSubIndex(scIdx);\n          handleYesSubcategoryOverride(scList[scIdx].id);\n        }\n      }\n    } else if (sug.type === \"neighborhood\") {\n      loadPlacesByNeighborhood(sug.id);\n    }\n  }\n\n  async function loadPlacesByNeighborhood(neighborhoodId) {\n    try {\n      const { data, error } = await supabase\n        .from(\"places\")\n        .select(\"*\")\n        .eq(\"neighborhood_id\", neighborhoodId);\n      if (error) throw error;\n      if (!data || data.length === 0) {\n        alert(\"No places found in that neighborhood!\");\n        return;\n      }\n      data.sort((a, b) => (b.weight || 0) - (a.weight || 0));\n      setPlaces(data);\n      setPlaceIndex(0);\n      setMode(\"places\");\n    } catch (err) {\n      setErrorMsg(err.message);\n    }\n  }\n\n  // ===============================\n  // 3) Category Flow\n  // ===============================\n  const currentCategory = categories[catIndex] || null;\n  function handleYesCategoryOverride(catIdx) {\n    if (catIdx < 0 || catIdx >= categories.length) return;\n    const catObj = categories[catIdx];\n    setSelectedCategory(catObj);\n    setSubIndex(0);\n    setPlaceIndex(0);\n    setMode(\"subcategories\");\n  }\n  function handleYesCategory() {\n    if (!currentCategory) return;\n    setSelectedCategory(currentCategory);\n    setSubIndex(0);\n    setPlaceIndex(0);\n    setMode(\"subcategories\");\n  }\n  function handleNoCategory() {\n    const next = catIndex + 1;\n    if (next >= categories.length) {\n      alert(\"No more categories left!\");\n    } else {\n      setCatIndex(next);\n    }\n  }\n\n  // ===============================\n  // 4) Subcategory Flow\n  // ===============================\n  const scList = getSubcatsForCategory(selectedCategory);\n  const currentSubcat = scList[subIndex] || null;\n\n  async function handleYesSubcategoryOverride(subId) {\n    const subObj = subcategories.find((x) => x.id === subId);\n    if (!subObj) return;\n    setSelectedSubcategory(subObj);\n\n    try {\n      const { data, error } = await supabase\n        .from(\"place_subcategories\")\n        .select(\"place_id, places(*)\")\n        .eq(\"subcategory_id\", subId);\n      if (error) throw error;\n\n      let placeItems = (data || []).map((row) => row.places);\n      placeItems.sort((a, b) => (b.weight || 0) - (a.weight || 0));\n\n      setPlaces(placeItems);\n      setPlaceIndex(0);\n      setMode(\"places\");\n    } catch (err) {\n      setErrorMsg(err.message);\n    }\n  }\n\n  function handleYesSubcategory() {\n    if (!currentSubcat) return;\n    handleYesSubcategoryOverride(currentSubcat.id);\n  }\n  function handleNoSubcategory() {\n    const next = subIndex + 1;\n    if (next >= scList.length) {\n      const nextCat = catIndex + 1;\n      if (nextCat >= categories.length) {\n        alert(\"No more categories left!\");\n        setMode(\"categories\");\n      } else {\n        setCatIndex(nextCat);\n        setMode(\"categories\");\n      }\n    } else {\n      setSubIndex(next);\n    }\n  }\n\n  // ===============================\n  // 5) Places Flow\n  // ===============================\n  const currentPlace = places[placeIndex] || null;\n  function handleYesPlace() {\n    if (!currentPlace) return;\n    setShowCelebration(true);\n    setTimeout(() => setShowCelebration(false), 2000);\n\n    // Only places become final matches\n    setMatches((prev) => [...prev, currentPlace]);\n    if (!matchDeckOpen) {\n      setNewMatchesCount((n) => n + 1);\n    }\n\n    const next = placeIndex + 1;\n    if (next >= places.length) {\n      moveToNextSubcategory();\n    } else {\n      setPlaceIndex(next);\n    }\n  }\n  function handleNoPlace() {\n    const next = placeIndex + 1;\n    if (next >= places.length) {\n      moveToNextSubcategory();\n    } else {\n      setPlaceIndex(next);\n    }\n  }\n  function moveToNextSubcategory() {\n    const next = subIndex + 1;\n    if (next >= scList.length) {\n      const nextCat = catIndex + 1;\n      if (nextCat >= categories.length) {\n        alert(\"No more categories left!\");\n        setMode(\"categories\");\n      } else {\n        setCatIndex(nextCat);\n        setMode(\"categories\");\n      }\n    } else {\n      setSubIndex(next);\n      setMode(\"subcategories\");\n    }\n  }\n\n  // unify no / yes\n  function handleNo() {\n    if (mode === \"places\") {\n      handleNoPlace();\n    } else if (mode === \"subcategories\") {\n      handleNoSubcategory();\n    } else {\n      handleNoCategory();\n    }\n  }\n  function handleYes() {\n    if (mode === \"places\") {\n      handleYesPlace();\n    } else if (mode === \"subcategories\") {\n      handleYesSubcategory();\n    } else {\n      handleYesCategory();\n    }\n  }\n\n  // ===============================\n  // 6) Navigation & Rendering\n  // ===============================\n  function handleGoBack() {\n    if (mode === \"places\") {\n      setMode(\"subcategories\");\n    } else if (mode === \"subcategories\") {\n      setMode(\"categories\");\n    } else {\n      alert(\"Already at top-level categories!\");\n    }\n  }\n  function handleReshuffle() {\n    setCatIndex(0);\n    setSubIndex(0);\n    setPlaceIndex(0);\n    setSelectedCategory(null);\n    setSelectedSubcategory(null);\n    setPlaces([]);\n    setMode(\"categories\");\n    setSearchTerm(\"\");\n    setSearchSuggestions([]);\n    setShowSearchSuggestions(false);\n    setMatchDeckOpen(false);\n  }\n\n  // ===============================\n  // 7) Build Final Card Data\n  // ===============================\n  function getCurrentCardData() {\n    if (mode === \"categories\") {\n      if (!currentCategory) return null;\n      return {\n        name: currentCategory.name,\n        image_url: currentCategory.image_url || \"\",\n        neighborhood: \"\",\n        description: \"\",\n        latitude: null,\n        longitude: null\n      };\n    } else if (mode === \"subcategories\") {\n      if (!currentSubcat) return null;\n      return {\n        name: currentSubcat.name,\n        image_url: currentSubcat.image_url || \"\",\n        neighborhood: \"\",\n        description: \"\",\n        latitude: null,\n        longitude: null\n      };\n    } else if (mode === \"places\") {\n      if (!currentPlace) return null;\n      return {\n        name: currentPlace.name,\n        image_url: currentPlace.image_url || \"\",\n        neighborhood: currentPlace.neighborhood || \"\",\n        description: currentPlace.description || \"\",\n        latitude: currentPlace.latitude || null,\n        longitude: currentPlace.longitude || null\n      };\n    }\n    return null;\n  }\n\n  const currentCard = getCurrentCardData();\n  if (!currentCard) {\n    return (\n      <div style={styles.container}>\n        <h1>DialN</h1>\n        <p>No more {mode} to show!</p>\n        <button onClick={handleReshuffle} style={styles.reshuffleButton}>\n          Reshuffle\n        </button>\n      </div>\n    );\n  }\n\n  // For background image fallback\n  const bgImage = currentCard.image_url?.trim()\n    ? currentCard.image_url\n    : \"/images/default-bg.jpg\";\n\n  // Neighborhood link => Wikipedia\n  const wikiNeighborhoodUrl = currentCard.neighborhood\n    ? `https://en.wikipedia.org/wiki/${encodeURIComponent(\n        currentCard.neighborhood\n      )}`\n    : null;\n\n  // Place link => Google Maps (direct link)\n  let googlePlaceUrl = null;\n  if (mode === \"places\" && currentCard.latitude && currentCard.longitude) {\n    googlePlaceUrl = `https://www.google.com/maps/search/?api=1&query=${currentCard.latitude},${currentCard.longitude}`;\n  }\n\n  // ===============================\n  // 8) Google Maps Embed Iframe\n  // ===============================\n  // We can't use \"view?center=...&markers=...\" in some embed modes, so we do a \"search?q=lat,lng\"\n  let googleEmbedUrl = null;\n  if (mode === \"places\" && googleMapsKey && currentCard.latitude && currentCard.longitude) {\n    const lat = currentCard.latitude;\n    const lng = currentCard.longitude;\n\n    // We'll do a \"search\" embed with q=lat,lng\n    // e.g. https://www.google.com/maps/embed/v1/search?key=xxx&zoom=14&q=39.2815,-76.5931\n    googleEmbedUrl = `https://www.google.com/maps/embed/v1/search\n      ?key=${googleMapsKey}\n      &zoom=14\n      &q=${lat},${lng}`.replace(/\\s+/g, \"\");\n  }\n\n  return (\n    <div style={{ ...styles.container, backgroundImage: `url(${bgImage})` }}>\n      <div style={styles.overlay}>\n        {/* Top row => matched deck + search */}\n        <div style={styles.topRow}>\n          <div style={styles.topLeftEmpty}></div>\n\n          <MatchedDeckButton\n            matches={matches}\n            newMatchesCount={newMatchesCount}\n            matchDeckOpen={matchDeckOpen}\n            setMatchDeckOpen={setMatchDeckOpen}\n            setNewMatchesCount={setNewMatchesCount}\n          />\n\n          <div style={styles.topRightArea}>\n            <div style={styles.usaBaltimoreText}>USA &rarr; Baltimore</div>\n            <SubcategorySearchBar\n              searchTerm={searchTerm}\n              setSearchTerm={setSearchTerm}\n              suggestions={searchSuggestions}\n              showSuggestions={showSearchSuggestions}\n              setShowSearchSuggestions={setShowSearchSuggestions}\n              onPick={pickSearchSuggestion}\n            />\n          </div>\n        </div>\n\n        <div style={styles.centerContent}>\n          {/* If in places mode, show an embedded Google map pinned at lat/lon */}\n          {mode === \"places\" && googleEmbedUrl && (\n            <div style={styles.mapWrapper}>\n              <iframe\n                width=\"600\"\n                height=\"400\"\n                style={{ border: 0 }}\n                loading=\"lazy\"\n                allowFullScreen\n                src={googleEmbedUrl}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Bottom text => neighborhood link, place link, yes/no, desc */}\n        <div style={styles.bottomTextRow}>\n          {mode === \"places\" && currentCard.neighborhood && (\n            <p style={styles.neighborhoodText}>\n              <a\n                href={wikiNeighborhoodUrl || \"#\"}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={styles.neighborhoodLink}\n              >\n                {currentCard.neighborhood}\n              </a>\n            </p>\n          )}\n          {mode === \"places\" && googlePlaceUrl ? (\n            <h1 style={styles.cardTitle}>\n              <a\n                href={googlePlaceUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={styles.placeLink}\n              >\n                {currentCard.name}\n              </a>\n            </h1>\n          ) : (\n            <h1 style={styles.cardTitle}>{currentCard.name}</h1>\n          )}\n\n          <div style={styles.yesNoRow}>\n            <button style={styles.noButton} onClick={handleNo}>\n              No\n            </button>\n            <button style={styles.yesButton} onClick={handleYes}>\n              Yes\n            </button>\n          </div>\n\n          {mode === \"places\" && currentCard.description && (\n            <p style={styles.descriptionText}>{currentCard.description}</p>\n          )}\n        </div>\n\n        <button style={styles.goBackButton} onClick={handleGoBack}>\n          Go Back\n        </button>\n        <button style={styles.reshuffleButton} onClick={handleReshuffle}>\n          Reshuffle\n        </button>\n\n        {/* Match Deck Overlay */}\n        {matchDeckOpen && (\n          <MatchDeckOverlay\n            matches={matches}\n            onClose={() => {\n              setMatchDeckOpen(false);\n              setNewMatchesCount(0);\n            }}\n          />\n        )}\n      </div>\n\n      {showCelebration && <CelebrationAnimation />}\n      {errorMsg && (\n        <p style={{ color: \"red\", position: \"absolute\", top: 10, left: 10 }}>\n          {errorMsg}\n        </p>\n      )}\n    </div>\n  );\n}\n\n/* SubcategorySearchBar */\nfunction SubcategorySearchBar({\n  searchTerm,\n  setSearchTerm,\n  suggestions,\n  showSuggestions,\n  setShowSearchSuggestions,\n  onPick\n}) {\n  function handleFocus() {\n    if (searchTerm) setShowSearchSuggestions(true);\n  }\n  function handleBlur() {\n    setTimeout(() => {\n      setShowSearchSuggestions(false);\n    }, 200);\n  }\n  return (\n    <div style={styles.searchBarContainer}>\n      <input\n        style={styles.searchInput}\n        type=\"text\"\n        placeholder=\"Type e.g. 'food' or 'Federal Hill'...\"\n        value={searchTerm}\n        onChange={(e) => {\n          setSearchTerm(e.target.value);\n          setShowSearchSuggestions(true);\n        }}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n      />\n      {showSuggestions && suggestions.length > 0 && (\n        <div style={styles.suggestionList}>\n          {suggestions.map((sug, i) => (\n            <div\n              key={i}\n              style={styles.suggestionItem}\n              onClick={() => onPick(sug)}\n            >\n              {sug.type === \"category\"\n                ? `Category: ${sug.name}`\n                : sug.type === \"subcategory\"\n                ? `Subcat: ${sug.name}`\n                : `Neighborhood: ${sug.name}`}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/* MatchedDeckButton */\nfunction MatchedDeckButton({\n  matches,\n  newMatchesCount,\n  matchDeckOpen,\n  setMatchDeckOpen,\n  setNewMatchesCount\n}) {\n  return (\n    <div style={styles.matchDeckBtnContainer}>\n      <button\n        style={styles.matchDeckButton}\n        onClick={() => {\n          setMatchDeckOpen(true);\n          setNewMatchesCount(0);\n        }}\n      >\n        Matches {newMatchesCount > 0 && `(+${newMatchesCount})`}\n      </button>\n    </div>\n  );\n}\n\n/* MatchDeckOverlay */\nfunction MatchDeckOverlay({ matches, onClose }) {\n  return (\n    <div style={styles.matchDeckOverlay}>\n      <div style={styles.matchDeckBox}>\n        <h2>Match Deck</h2>\n        <button onClick={onClose} style={styles.closeDeckButton}>\n          Close\n        </button>\n        {matches.length === 0 ? (\n          <p>No matches yet.</p>\n        ) : (\n          <ul>\n            {matches.map((m, i) => (\n              <li key={i}>\n                <strong>{m.name}</strong>\n                {m.neighborhood && ` - ${m.neighborhood}`}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/* CelebrationAnimation */\nfunction CelebrationAnimation() {\n  return (\n    <div style={styles.celebrationOverlay}>\n      <div style={styles.celebrationBox}>\n        <h2 style={{ margin: 0 }}>MATCH!</h2>\n        <p>Great choice!</p>\n      </div>\n    </div>\n  );\n}\n\n/* STYLES */\nconst styles = {\n  container: {\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    backgroundRepeat: \"no-repeat\",\n    position: \"relative\",\n    fontFamily: \"sans-serif\"\n  },\n  overlay: {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: \"rgba(0,0,0,0.3)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    position: \"relative\"\n  },\n  topRow: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n    padding: \"10px 20px\"\n  },\n  topLeftEmpty: {\n    width: \"20%\",\n    minWidth: \"100px\"\n  },\n  topRightArea: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-end\"\n  },\n  usaBaltimoreText: {\n    color: \"#ffd700\",\n    fontSize: \"1.2em\",\n    textShadow: \"1px 1px 2px rgba(0,0,0,0.8)\",\n    marginBottom: \"8px\"\n  },\n  matchDeckBtnContainer: {\n    width: \"60%\",\n    textAlign: \"center\"\n  },\n  matchDeckButton: {\n    backgroundColor: \"#ff9800\",\n    color: \"#fff\",\n    border: \"none\",\n    padding: \"8px 16px\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\",\n    fontSize: \"1em\"\n  },\n  searchBarContainer: {\n    position: \"relative\"\n  },\n  searchInput: {\n    width: \"220px\",\n    padding: \"6px\",\n    borderRadius: \"4px\",\n    border: \"1px solid #888\"\n  },\n  suggestionList: {\n    position: \"absolute\",\n    top: \"35px\",\n    left: 0,\n    width: \"220px\",\n    backgroundColor: \"#333\",\n    borderRadius: \"4px\",\n    zIndex: 9999,\n    maxHeight: \"140px\",\n    overflowY: \"auto\"\n  },\n  suggestionItem: {\n    padding: \"5px\",\n    color: \"#fff\",\n    cursor: \"pointer\",\n    borderBottom: \"1px solid #555\"\n  },\n  centerContent: {\n    flexGrow: 1,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  mapWrapper: {\n    width: \"600px\",\n    height: \"400px\",\n    border: \"2px solid #fff\",\n    borderRadius: \"8px\",\n    overflow: \"hidden\"\n  },\n  bottomTextRow: {\n    textAlign: \"center\",\n    marginBottom: \"70px\"\n  },\n  neighborhoodText: {\n    color: \"#FFD700\",\n    fontSize: \"1.3em\",\n    marginBottom: \"5px\",\n    fontWeight: \"bold\",\n    textShadow: \"1px 1px 3px rgba(0,0,0,0.7)\"\n  },\n  neighborhoodLink: {\n    color: \"#FFD700\",\n    textDecoration: \"underline\"\n  },\n  placeLink: {\n    color: \"#fff\",\n    textDecoration: \"underline\"\n  },\n  cardTitle: {\n    color: \"#fff\",\n    fontSize: \"3em\",\n    textShadow: \"2px 2px 4px rgba(0,0,0,0.8)\",\n    margin: 0,\n    textTransform: \"uppercase\"\n  },\n  descriptionText: {\n    color: \"#fff\",\n    marginTop: \"15px\",\n    fontSize: \"1.1em\",\n    lineHeight: \"1.4\"\n  },\n  yesNoRow: {\n    marginTop: \"20px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    gap: \"40px\"\n  },\n  noButton: {\n    backgroundColor: \"#f44336\",\n    color: \"#fff\",\n    border: \"none\",\n    padding: \"12px 24px\",\n    borderRadius: \"5px\",\n    fontSize: \"1.1em\",\n    cursor: \"pointer\"\n  },\n  yesButton: {\n    backgroundColor: \"#4CAF50\",\n    color: \"#fff\",\n    border: \"none\",\n    padding: \"12px 24px\",\n    borderRadius: \"5px\",\n    fontSize: \"1.1em\",\n    cursor: \"pointer\"\n  },\n  goBackButton: {\n    position: \"absolute\",\n    bottom: \"20px\",\n    left: \"20px\",\n    padding: \"8px 16px\",\n    backgroundColor: \"#2196F3\",\n    color: \"#fff\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\"\n  },\n  reshuffleButton: {\n    position: \"absolute\",\n    bottom: \"20px\",\n    right: \"20px\",\n    padding: \"8px 16px\",\n    backgroundColor: \"#9C27B0\",\n    color: \"#fff\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    cursor: \"pointer\"\n  },\n  matchDeckOverlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgba(0,0,0,0.7)\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    zIndex: 10000\n  },\n  matchDeckBox: {\n    backgroundColor: \"#fff\",\n    padding: \"20px\",\n    borderRadius: \"8px\",\n    width: \"300px\",\n    maxHeight: \"70vh\",\n    overflowY: \"auto\",\n    position: \"relative\"\n  },\n  celebrationOverlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    zIndex: 9999\n  },\n  celebrationBox: {\n    backgroundColor: \"#fff\",\n    padding: \"30px\",\n    borderRadius: \"10px\",\n    textAlign: \"center\"\n  }\n};"
    }
  }
}
