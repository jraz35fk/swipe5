{
  "projectName": "Swipe5 (DialN Swipe Discovery)",
  "description": "A Next.js + Supabase app where users swipe from categories → subcategories → places. Only final 'place' cards become matches. The user can search or skip. Google Maps iframe pins each place on a map at the places layer.",
  "status": "in-progress",
  "technologies": {
    "frontend": "Next.js (React)",
    "database": "Supabase (PostgreSQL)",
    "maps": "Google Maps Embed API",
    "externalAPI": "Good Places API (placeholder if needed)"
  },
  "environmentVariables": {
    "GOOD_PLACES_API_KEY": "Your Good Places API Key here",
    "NEXT_PUBLIC_GOOGLE_MAPS_EMBED_KEY": "Your Google Maps Embed Key here",
    "NEXT_PUBLIC_SUPABASE_URL": "Your Supabase project URL here",
    "NEXT_PUBLIC_SUPABASE_ANON_KEY": "Your Supabase anon key here"
  },
  "supabase": {
    "tables": [
      {
        "name": "categories",
        "schemaFields": [
          { "id": "int4" },
          { "name": "text" },
          { "is_active": "boolean?" },
          { "weight": "int4?" }
        ],
        "notes": "Top-level categories. 'is_active' helps avoid showing categories with no real subcategories. 'weight' can help sort for display."
      },
      {
        "name": "subcategories",
        "schemaFields": [
          { "id": "int4" },
          { "category_id": "int4" },
          { "name": "text" },
          { "is_active": "boolean?" },
          { "weight": "int4?" }
        ],
        "notes": "Each subcategory references a category. 'is_active' hides subcategories with no places. 'weight' can help sorting."
      },
      {
        "name": "places",
        "schemaFields": [
          { "id": "int4" },
          { "name": "text" },
          { "neighborhood_id": "int4 (nullable)" },
          { "latitude": "float8?" },
          { "longitude": "float8?" },
          { "image_url": "text (nullable)" },
          { "description": "text (nullable)" },
          { "weight": "int4?" },
          { "is_active": "boolean?" }
        ],
        "notes": "Final 'swipe' cards. Only places get matched. 'latitude'/'longitude' for Google Maps embed; 'is_active' hides incomplete or deactivated places."
      },
      {
        "name": "neighborhoods",
        "schemaFields": [
          { "id": "int4" },
          { "name": "text" },
          { "is_active": "boolean?" },
          { "weight": "int4?" }
        ],
        "notes": "Neighborhoods. If user searches a neighborhood, we load places in that neighborhood. 'weight' for sorting, 'is_active' for validity."
      },
      {
        "name": "place_subcategories",
        "schemaFields": [
          { "place_id": "int4" },
          { "subcategory_id": "int4" },
          { "weight": "int4?" }
        ],
        "notes": "Join table linking places to subcategories. Potentially includes 'weight' or other metadata."
      },
      {
        "name": "reviews",
        "schemaFields": [
          { "id": "int4" },
          { "place_id": "int4" },
          { "user_id": "int4" },
          { "rating": "int4" },
          { "comment": "text" },
          { "created_at": "timestamp" }
        ],
        "notes": "If we enable user reviews, we store them here."
      },
      {
        "name": "food_categories",
        "schemaFields": [],
        "notes": "Placeholder. Possibly unify with 'subcategories' if not needed."
      },
      {
        "name": "place_food_categories",
        "schemaFields": [],
        "notes": "Placeholder join table for places to specialized 'food categories.'"
      }
    ],
    "buckets": [
      {
        "bucketName": "category-images",
        "access": "Public",
        "storedFiles": [
          "baltimore_53.jpg",
          "downtown_3.jpg",
          "various_1.jpg"
        ],
        "notes": "Images for categories or neighborhoods."
      },
      {
        "bucketName": "activity-images",
        "access": "Public",
        "storedFiles": [],
        "notes": "Optional bucket for place/activity images."
      }
    ],
    "notes": "We can filter out items (categories/subcategories/neighborhoods/places) by checking 'is_active' or by weighting them."
  },
  "repository": {
    "githubUrl": "https://github.com/jraz35fk/swipe5",
    "latestCommit": "a094197 (8 hours ago)",
    "mainFiles": [
      {
        "name": "index.js",
        "location": "pages/index.js",
        "notes": "Handles logic for the category → subcategory → place swipe flow, embedded map, and search bar."
      },
      {
        "name": "MapContainer.js",
        "location": "components/MapContainer.js",
        "notes": "Example container for Google Maps iframe logic."
      },
      {
        "name": ".env.local",
        "location": "root directory",
        "notes": "Contains Supabase and Google Maps keys."
      }
    ]
  },
  "userPreferences": {
    "os": "macOS",
    "codeEditing": "prefers copy/paste entire scripts",
    "experienceLevel": "beginner",
    "deployment": "Vercel (with environment variables)",
    "notes": "Wants step-by-step instructions for any code changes. Full script rewrites are preferred."
  },
  "previousSteps": [
    {
      "date": "Earlier summary",
      "summary": "We configured the Next.js + Supabase setup, created database tables, set environment variables on Vercel, tested the Google Maps Embed. We planned the category → subcategory → place structure with a yes/no 'swipe' mechanic and a search bar."
    },
    {
      "date": "LegacyBotSummary",
      "legacyBotSummary": {
        "appName": "DialN Swipe Discovery",
        "description": "A Next.js + Supabase app where users swipe through categories → subcategories → places, only final 'place' cards become matches. The user can search or skip. Google Maps embed pins each place on a map when user reaches the places layer.",
        "supabaseSchema": {
          "categories": {
            "fields": ["id", "name", "is_active", "weight"],
            "usage": "Top-level categories. Only categories referencing real subcategories remain active."
          },
          "subcategories": {
            "fields": ["id", "category_id", "name", "is_active", "weight"],
            "usage": "Each subcategory references a category; only subcategories with places remain active."
          },
          "places": {
            "fields": [
              "id",
              "name",
              "neighborhood_id",
              "latitude",
              "longitude",
              "image_url",
              "description",
              "weight"
            ],
            "usage": "Final cards the user can match. Only 'places' are stored in the match deck."
          },
          "neighborhoods": {
            "fields": ["id", "name", "is_active", "weight"],
            "usage": "Stores local neighborhoods; active only if referencing real places. Allows user to search by neighborhood."
          },
          "place_subcategories": {
            "fields": ["place_id", "subcategory_id"],
            "usage": "A join table linking each place to its subcategories. Possibly includes weight or other metadata."
          }
        },
        "frontEndFlow": {
          "framework": "Next.js (React)",
          "states": {
            "catIndex": "Tracks current category index",
            "subIndex": "Tracks current subcategory index",
            "placeIndex": "Tracks current place index",
            "mode": "Either 'categories', 'subcategories', or 'places'",
            "selectedCategory": "Stores user-chosen category object",
            "selectedSubcategory": "Stores user-chosen subcategory object",
            "placesArray": "Holds the final loaded places for the chosen subcategory",
            "matches": "Array of places the user has said 'Yes' to in places mode"
          },
          "flowLogic": {
            "categories": {
              "Yes": "Select category → move to subcategories mode",
              "No": "Increment catIndex"
            },
            "subcategories": {
              "Yes": "Load places for subcategory → move to places mode",
              "No": "Increment subIndex"
            },
            "places": {
              "Yes": "User matches the place (added to 'matches'), then next placeIndex",
              "No": "Increment placeIndex"
            }
          },
          "searchBar": {
            "searchSuggestions": [
              "categories",
              "subcategories",
              "neighborhoods"
            ],
            "matchingLogic": "User types → we filter items → user picks item → jump to that layer (or load places if neighborhood)"
          },
          "matchDeck": {
            "overlayModal": "Shows all matched places. Closes on user command, new matches counted as (+N) if closed.",
            "matchesArray": "Holds final matched places"
          }
        },
        "googleMapsIntegration": {
          "approach": "Google Maps Embed (iframe) with 'search' mode",
          "envVariable": "NEXT_PUBLIC_GOOGLE_MAPS_EMBED_KEY",
          "urlExample": "https://www.google.com/maps/embed/v1/search?key=YOUR_KEY&zoom=14&q=LAT,LON",
          "whereItAppears": "Places layer only, each place card has an iframe pinned to latitude/longitude"
        },
        "extraDetails": {
          "isActiveFiltering": "Categories, subcategories, neighborhoods get is_active=FALSE if empty",
          "weightSorting": "Places or subcategories can be sorted descending by weight",
          "neighborhoodSearch": "User can pick a neighborhood from search → app loads places for that neighborhood",
          "matchesAreOnlyPlaces": "Categories/subcategories never become matches, only final place cards"
        },
        "exampleIndexHighlights": [
          "loadBaseData() from Supabase → categories, subcategories, neighborhoods",
          "filter subcategories referencing places → filter categories referencing subcategories",
          "Yes/No flow: handleYesCategory, handleYesSubcategory, handleYesPlace, etc.",
          "Search merges categories, subcategories, neighborhoods → pickSearchSuggestion() handles jumps"
        ]
      }
    }
  ],
  "consolidatedProjectSummary": {
    "concept": "A Tinder-like or yes/no 'swipe' interface that leads the user through categories → subcategories → places. Only 'places' can be matched. There is also a search bar combining categories, subcategories, neighborhoods. On the final place card, we embed a Google Map pinned at lat/lon.",
    "databaseSchema": "Uses Supabase with tables for categories, subcategories, places, neighborhoods, plus a join table (place_subcategories) to link them. We may filter items by 'is_active' or 'weight' to avoid empty leads.",
    "frontEndFlow": {
      "states": {
        "catIndex": "Index into categories[]",
        "subIndex": "Index into subcategories[]",
        "placeIndex": "Index into places[]",
        "mode": "'categories' | 'subcategories' | 'places'",
        "selectedCategory": "Currently chosen category object",
        "selectedSubcategory": "Currently chosen subcategory object",
        "placesArray": "Holds loaded places for the selected subcategory (or neighborhood)",
        "matches": "Array of final places that user said 'Yes' to"
      },
      "yesNoFlow": {
        "categoriesYes": "Sets 'selectedCategory', transitions to subcategories mode",
        "categoriesNo": "Increment catIndex",
        "subcategoriesYes": "Loads places for that subcat, transitions to places mode",
        "subcategoriesNo": "Increment subIndex",
        "placesYes": "Adds place to matches, increments placeIndex",
        "placesNo": "Increment placeIndex"
      },
      "searchBar": "Merges categories, subcategories, neighborhoods in a single suggestion list. If user picks a neighborhood, load places in that neighborhood. If category or subcategory, jump to that flow. Clear search afterward."
    },
    "mapsIntegration": {
      "method": "Google Maps Embed API with <iframe>",
      "paramFormat": "https://www.google.com/maps/embed/v1/search?key=EMBED_KEY&zoom=14&q=LAT,LON"
    }
  },
  "openQuestions": [
    "Do we integrate user authentication for reviews or matches, or keep it local?",
    "Do we unify 'food_categories' or remove them entirely?",
    "Any advanced design or styling changes needed next?"
  ],
  "notes": "We keep everything in sync here. We'll update the 'index.js' code in 'files' with every new iteration.",
  "files": {
    "index.js": {
      "purpose": "The main Next.js page for category → subcategory → place flow, plus searching and Google Map embed.",
      "code": "// [Will be replaced or updated as you share your actual index.js code next.]"
    }
  }
}
